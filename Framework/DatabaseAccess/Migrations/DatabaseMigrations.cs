using DatabaseAccess.Models;
using System;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Migrations;
using System.Data.Entity.Migrations.Infrastructure;
using System.Linq;
using Framework.Utility;
using Transverse.Interfaces.DAL;
using Transverse.Models.DAL;
using Transverse.Utils;
using Constants = Transverse.Constants;

namespace DatabaseAccess.Migrations
{
    public class DatabaseMigrations : IDatabaseMigrationsRepository
    {
        public void ApplyDatabaseMigrations()
        {
            //Configuration is the class created by Enable-Migrations
            DbMigrationsConfiguration dbMgConfig = new Configuration()
            {
                //DbContext subclass generated by EF power tools
                ContextType = typeof(FrameworkContext)
            };
            using (var databaseContext = new FrameworkContext())
            {
                try
                {
                    var database = databaseContext.Database;
                    var isExistsDatabase = database.Exists();

                    var migrationConfiguration = dbMgConfig;

                    migrationConfiguration.TargetDatabase =
                        new DbConnectionInfo(database.Connection.ConnectionString, "System.Data.SqlClient");
                    var migrator = new DbMigrator(migrationConfiguration);

                    // update or create database
                    migrator.Update();

                    // if database is first initial, then initial data for it
                    if (isExistsDatabase)
                    {
                        return;
                    }

                    InitialData(databaseContext);
                }
                catch (AutomaticDataLossException adle)
                {
                    dbMgConfig.AutomaticMigrationDataLossAllowed = true;
                    var mg = new DbMigrator(dbMgConfig);
                    var scriptor = new MigratorScriptingDecorator(mg);
                    string script = scriptor.ScriptUpdate(null, null);
                    throw new Exception(adle.Message + " : " + script);
                }
            }
        }

        private static void InitialData(FrameworkContext context)
        {
            InitRoles(context);
            InitUsers(context);

            
        }

        private static void InitRoles(FrameworkContext context)
        {
            var admin = new Role
            {
                Name = Constants.RoleName.Admin,
                Description = Constants.RoleName.Admin,
                IsDeleted = false,
                CreatedDate = DateTimeHelper.UTCNow()
            };
            var moderator = new Role
            {
                Name = Constants.RoleName.Moderator,
                Description = Constants.RoleName.Moderator,
                IsDeleted = false,
                CreatedDate = DateTimeHelper.UTCNow()
            };
            var user = new Role
            {
                Name = Constants.RoleName.User,
                Description = Constants.RoleName.User,
                IsDeleted = false,
                CreatedDate = DateTimeHelper.UTCNow()
            };
            var customer = new Role
            {
                Name = Constants.RoleName.Customer,
                Description = Constants.RoleName.Customer,
                IsDeleted = false,
                CreatedDate = DateTimeHelper.UTCNow()
            };

            context.Role.AddOrUpdate(x => x.Name, admin, moderator, user, customer);
            context.SaveChanges();
        }

        private static void InitUsers(FrameworkContext context)
        {
            var admin = new User
            {
                RoleId = context.Role.First(x => x.IsDeleted == false && x.Name == Constants.RoleName.Admin).Id,
                Email = BackendHelpers.AdminEmail(),
                FirstName = Constants.RoleName.Admin,
                LastName = Constants.AppName,
                PasswordHash = BackendHelpers.AdminPasswordHash(),
                PasswordSalt = BackendHelpers.AdminPasswordSalt(),
                IsActive = true,
                IsDeleted = false,
                CreatedDate = DateTimeHelper.UTCNow()
            };

            context.User.AddOrUpdate(x => x.Email, admin);
            context.SaveChanges();
        }
    }
}